#steps:
#1. set the reference trajectory 
#2. define the state and control boundaries
#3. initialize the predictive states p 
#4. initialize the control states u 
#5. update the state states in each time step(mpc control update)
#calculate the optimization solver
#the control vectore generated from the solver is then used to minimize the cost function
#7. calculate the cost function that finds the error of the predicted states and control states and minimize it
#8. the cost function is needed for the control update 
#9. find the optimal path according to the resulting state states and a reference states (polynomial fit)

import pandas as pd
import numpy as np
from math import *
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib.gridspec as gridspec
import matplotlib.patches as mpatches
from scipy.optimize import minimize
from autograd import grad



def traj(xr):
    
    yr = 0.5 * np.sin(xr)
    return yr

def theta(xr):
    #xr = xr.float()
    grad_fct = grad(traj)
    theta_r=[]
    for i in xr:
        theta_r.append(np.arctan(grad_fct(1.0)))
    return theta_r    

def predict_model(prev_state, dt, throt, steering):
         

        x_curr = prev_state[0] + np.cos(prev_state[2]) * prev_state[3] * dt
        y_curr = prev_state[1] + np.sin(prev_state[2]) * prev_state[3] * dt

        a_curr = throt
        v_curr = prev_state[3] + a_curr * dt - prev_state[3]/25

        psi_curr = prev_state[2] + v_curr * dt * np.tan(steering)/Lf

        return [x_curr, y_curr, psi_curr, v_curr]

def cost_function(u, *args):
        p_state = args[0]
        ref_state = args[1]
        cost = 0

        for i in range(control_horizon):
            #here, we calculate the errors of the state variables
            x_pos = p_state[0]
            y_pos = p_state[1]
            velocity = p_state[3]
            psi = p_state[2]
            p_state = predict_model(p_state,dt, u[i*2], u[i*2 + 1])

            ref_dist = np.sqrt((ref_state[0] - p_state[0])**2 + (ref_state[1] - p_state[1])**2)
            prev_distance = np.sqrt((x_pos - p_state[0])**2 + (y_pos - p_state[1])**2)

            obstacle_dist = np.sqrt((x_obs - p_state[0])**2 + (y_obs - p_state[1])**2)

            # Position error cost
            cost +=  10*ref_dist #this cost doen't have high weight
 
            # Obstacle distance cost
            #if obstacle_dist < 1.5:
                #cost += 3.5/obstacle_dist # the value 0.1 represents the weight of the cost

            # psi error cost
            cost += 1 * (psi - p_state[2])**2 #weight is 10
            cost +=  2 * (ref_state[2] - p_state[2])**2 #weight is 2

            # throttle error cost
            if abs(u[2*i]) > 0.2:
                cost += (velocity - p_state[3])**2

        return cost

#define some variables for the state update
dt=0.2
Lf = 2.5

#set the reference trajectory

x_vals = np.arange(0,10,0.1)
y_vals = [1]*100
thetaval = [0]*100
'''
np.array([0.46364760900080615,

 0.4616472791138404,

 0.4556424965970442,

 0.4456231321238629,

 0.4315765008224147,

 0.4134937567444741,

 0.3913789766671426,

 0.3652609082479852,

 0.335207122267919,

 0.30133991031666313,

 0.26385271169564106,

 0.2230252019884612,

 0.17923458339921525,

 0.1329603231802893,

 0.08477986379555537,

 0.03535386391853913,

 -0.014598723955535572,

 -0.06433334612510618,

 -0.11311611539570644,

 -0.16025857740224791,

 -0.2051462729814271,

 -0.24725787954004508,

 -0.286173766753117,

 -0.32157475367301286,

 -0.3532332091587291,

 -0.38099921763232597,

 -0.4047844444086243,

 -0.4245458337303965,

 -0.440270621840136,

 -0.4519635383244488,

 -0.4596366010729208,

 -0.4633016092763693,

 -0.4629652867220663,

 -0.4586269871753954,

 -0.45027890419651984,

 -0.43790879109437814,

 -0.42150525710131975,

 -0.4010657272323106,

 -0.3766070969065042,

 -0.3481789375544691,

 -0.3158787808798515,

 -0.2798685143607494,

 -0.24039029510499033,

 -0.1977797476547955,

 -0.1524737601473603,

 -0.10501020205799923,

 -0.05601759596270749,

 -0.006194252508291571,

 0.04372161129232162,

 0.09298724580303104,

 0.14089138135817264,

 0.1867858671377193,

 0.23010899492299575,

 0.27039846446686044,

 0.3072940163741268,

 0.3405314023766045,

 0.3699302660533718,

 0.39537867107273006,

 0.4168166507377127,

 0.4342205356400878,

 0.44758917257023245,

 0.4569326145020959,

 0.4622634914645416,

 0.4635910619554935,

 0.4609178625863942,

 0.4542388794958596,

 0.443543219224457,

 0.4288183226484384,

 0.4100568076911279,

 0.3872660074022217,

 0.3604801492772087,

 0.32977486041409204,

 0.29528325639376496,

 0.25721229172338783,

 0.2158573949995586,

 0.17161285111792834,

 0.12497517657963061,

 0.07653713022413407,

 0.026971168373588976,

 -0.022997007877923855,

 -0.07262207820346725,

 -0.12117547931370087,

 -0.16797942822365203,

 -0.212434073000226,

 -0.2540348778307371,

 -0.292379429908203,

 -0.32716473381699773,

 -0.35817728708573304,

 -0.38527868492971923,

 -0.4083893253940738,

 -0.42747224271083517,

 -0.44251844204743046,

 -0.4535345188677597,

 -0.4605329060782174,

 -0.46352481827718767,

 -0.4625158318645305,

 -0.457504014054683,

 -0.4484805524946041,

 -0.43543290251012606,

 -0.4183505254004926,

 -0.3972333023061021,

 -0.3721026347036214,

 -0.3430150440063083,

 -0.3100777261298785,

 -0.27346499556089854,

 -0.23343391480966613,

 -0.19033677878612,

 -0.1446277302123851,

 -0.09686089473398227,

 -0.047678264939834035,

 0.0022128453821496207,

 0.05207090102513161,

 0.10115598649086038,

 0.14876541876916244,

 0.19426421906114172,

 0.237106779764653,

 0.27684803801374663,

 0.3131445006158373,

 0.345746997536114,

 0.37448781228634304,

 0.3992648946572579,

 0.42002543641463985,

 0.4367504554861956,

 0.4494414020266915,

 0.45810929210105705,

 0.46276653292342074,

 0.4634214176266886,

 0.46007520320548184,

 0.4527217019273079,

 0.4413493751274116,

 0.4259459827135794,

 0.4065058762352489,

 0.383039990035601,

 0.35558844320731764,

 0.32423537705251826,

 0.28912519797563535,

 0.25047879538820844,

 0.20860765093600833,

 0.16392323328207858,

 0.11693894178738484,

 0.0682623824928547,

 0.018577055076607767,

 -0.03138555192385148,

 -0.08088039213147785,

 -0.12918519879784246,

 -0.1756336347264298,

 -0.21964094853620855,

 -0.26071958099433,

 -0.298484254815436,

 -0.332647873029514,

 -0.3630106488352303,

 -0.3894452228583168,

 -0.4118802656687915,

 -0.43028448510723927,

 -0.44465230448991006,

 -0.4549919092971457,

 -0.4613159481341878,

 -0.4636349262601173,

 -0.46195321990678206,

 -0.456267627497469,

 -0.4465684195676055,

 -0.4328429154819208,

 -0.41508166643160455,

 -0.39328732391135207,

 -0.3674861811554263,

 -0.33774215173973987,

 -0.3041725646221029,

 -0.26696460859818044,

 -0.22639061094805613,

 -0.1828197301987023,

 -0.13672331522893624,

 -0.08867140585980898,

 -0.03931882292361367,

 0.010619004924261152,

 0.060398249403847123,

 0.10928284768156124,

 0.15657957356002555,

 0.2016672367381854,

 0.2440166451864012,

 0.283199997853852,

 0.31889035657799397,

 0.3508532593483015,

 0.3789331779678973,

 0.4030374802175124,

 0.4231200781899949,

 0.4391662973518913,

 0.45117988366772976,

 0.4591725852527388,

 0.4631564310769118,

 0.4631386664638224,

 0.4591192572661844,

 0.4510909009480584,

 0.43904154487509073,

 0.4229594740286315,

 0.4028410562227297,

 0.37870118420079746,

 0.3505862900107797,

 0.3185894916547155,

 0.2828669497018433,

 0.24365389346763297,

 0.20127812973871595,

 0.15616837122407629,

 0.10885468407602325,

 0.059959001538015214,

 0.010175070502628022,

 -0.03976081745577177,

 -0.08910492936466238,

 -0.1371422424447053,

 -0.1832185966331481,

 -0.22676478330939928,

 -0.26731036046483886,

 -0.30448706457716546,

 -0.33802338329285664,

 -0.36773281888106346,

 -0.39349858935255033,

 -0.41525718276677825,

 -0.43298257410063556,

 -0.44667226625565415,

 -0.4563357717677506,

 -0.4619857683476751,

 -0.4636319394358956,

 -0.4612774202278896,

 -0.45491776997184286,

 -0.44454244302011137,

 -0.4301387973816484,

 -0.411698724869894,

 -0.38922797413881377,

 -0.3627581267721048,

 -0.33236093772431013,

 -0.29816433810017956,

 -0.2603688286058075,

 -0.219262338346209,

 -0.17523104700462988,

 -0.12876341446693762,

 -0.08044500124220469,

 -0.03094276777898296,

 0.019020662652225313,

 0.06870020317411236,

 0.11736464650649439,

 0.1643310567259992,

 0.2089925994607031,

 0.2508367621422393,

 0.2894529856333804,

 0.324530643276525,

 0.35584959197498567,

 0.3832660333371082,

 0.4066962873171241,

 0.42610055647690287,

 0.4414681055227031,

 0.45280468143302627,

 0.4601225461933264,

 0.46343320756292417,

 0.46274279264274415,

 0.4580499764561871,

 0.4493464127112497,

 0.4366196784268057,

 0.41985880251607177,

 0.3990624645296438,

 0.3742498845262486,

 0.3454742378228992,

 0.31283808509171784,

 0.2765097992362209,

 0.23673933764291177,

 0.1938710741115918,

 0.14835098299960062,

 0.10072553067729832,

 0.051630407539775346,

 0.0017687722228837232,

 -0.04811928447752114,

 -0.09729237707994338,

 -0.14504364542003922,

 -0.19073179276358465,

 -0.23380354401717032,

 -0.27380566704298626,

 -0.31038675260262744,

 -0.34329053466878756,

 -0.37234336641885113,

 -0.39743857412271294,

 -0.4185200144627332,

 -0.43556653352426994,

 -0.44857838764961266,

 -0.457566166381959,

 -0.46254240259881063,

 -0.4635158576358129,

 -0.46048839666280045,

 -0.4534543812495153,

 -0.4424025626906298,

 -0.42732052490308314,

 -0.4082017639653246,

 -0.3850554649047492,

 -0.35791890466409837,

 -0.32687213491083233,

 -0.2920541568218347,

 -0.25367920894640766,

 -0.21205113468819173,

 -0.16757325459528544,

 -0.12075099634698276,

 -0.07218499622145771,

 -0.022553620608846966,

 0.027414261456011505,

 0.07697334411875031,

 0.12539825892576756,

 0.17201715421933772,

 0.21623806888775546,

 0.25756538324566447,

 0.2956057175878944,

 0.33006448313702375,

 0.3607354498813686,

 0.38748608566757536,

 0.4102412003434245,

 0.42896686607330126,

 0.44365593032830314,

 0.4543158591419142,

 0.46095922300322933,

 0.46359687787725196,

 0.4622337742060042,

 0.4568673083341103,

 0.4474881732949375,

 0.43408373185050075,

 0.41664398856692886,

 0.39517024295714875,

 0.36968642278951747,

 0.340252885201703,

 0.30698210175498203,

 0.2700551089162655,

 0.22973696129224222,

 0.18638880909760328,

 0.14047386151623167,

 0.09255466747122029,

 0.04328005547702535,

 -0.00663827610081591,

 -0.05645745648486747,

 -0.10543947219540947,

 -0.1528865121778143,

 -0.19817078227622847,

 -0.24075528020275666,

 -0.2802040296915917,

 -0.3161822807129856,

 -0.34844865308266676,

 -0.37684190312659954,

 -0.40126499659698334,

 -0.42166871701467434,

 -0.438036396460714,

 -0.4503707311574601,

 -0.45868315051144193,

 -0.46298588120740547,

 -0.4632866743131929,

 -0.4595861078389553,

 -0.45187739908689095,

 -0.4401487216909756,

 -0.42438808546802775,

 -0.4045908673029477,

 -0.38077004001115455,

 -0.3529689927823193,

 -0.321276534445854,

 -0.285843201449396,

 -0.24689738240874048,

 -0.20475912063649243,

 -0.15984895738680882,

 -0.11268909570851786,

 -0.0638947516418071,

 -0.014154920898973852,

 0.03579625558509232,

 0.08521429349502567,

 0.13338062302735418,

 0.1796352288074399,

 0.2234014894574632,

 0.26420084196714605,

 0.30165698288707243,

 0.33549105987124955,

 0.365510335576152,

 0.39159307711497726,

 0.41367212661529407,

 0.4317190146082574,

 0.4457298269540807,

 0.45571347966810527,

 0.4616826591317986,

 0.4636474512362602,

 0.46161158325942153,

 0.4555711968657258,

 0.44551611959082477,

 0.43143366857625326,

 0.41331506865749523,

 0.3911645601772531,

 0.3650111701023533,

 0.33492288338414616,

 0.30102255162337066,

 0.26350431728599033,

 0.22264868010245037,

 0.17883374142227187,

 0.1325398724117045,

 0.0843453354547762,

 0.03491143054198489,

 -0.01504250974698517,

 -0.0647718652197971,

 -0.11354300519679753,

 -0.16066801893483496,

 -0.20553320566494673,

 -0.2476181239187059,

 -0.28650405418745695,

 -0.32187267716802676,

 -0.35349711808525264,

 -0.3812280809440153,

 -0.40497770390773613,

 -0.4247032634638228,

 -0.44039220390058165,

 -0.45204936047057576,

 -0.45968677817803866,

 -0.4633162286561131,

 -0.4629443766009443,

 -0.45857050756996137,

 -0.4501867599654215,

 -0.437780867507078,

 -0.4213414786937431,

 -0.4008661406189743,

 -0.37637197724676236,

 -0.34790891617098973,

 -0.3155749878549017,

 -0.27953272485082536,

 -0.2400250622492741,

 -0.1973884997381577,

 -0.15206083731744355,

 -0.10458081083888836,

 -0.05557766964277767,

 -0.005750221587172465,

 0.044163115605141065,

 0.09341971631425613,

 0.14130874209680053,

 0.18718272168057185,

 0.23048078857346402,

 0.27074155166108627,

 0.3076056418745319,

 0.34080961630965384,

 0.370173797355252,

 0.39558678260000096,

 0.41698899454415433,

 0.43435702104886703,

 0.44768985431442165,

 0.456997604174277,

 0.46229289297955406,

 0.46358493049572874,

 0.46087618622510695,

 0.4541615830184374,

 0.44343019025364644,

 0.4286694607115742,

 0.4098720970249722,

 0.3870456137269814,

 0.36022453912190133,

 0.32948493853125693,

 0.2949605122663037,

 0.25685894050111674,

 0.2154764924890869,

 0.17120835859881373,

 0.124551951683227,

 0.07610082700045977,

 0.026528043432111188,

 -0.023440367969731042,

 -0.07305907530972681,

 -0.12159982375854597,

 -0.16838541589751274,

 -0.212816785515113,

 -0.25439028919459444,

 -0.292704421640866,

 -0.32745703462482356,

 -0.35843536060024084,

 -0.38550158987583266,

 -0.4085765689250818,

 -0.4276236419929677,

 -0.442634003463023,

 -0.4536143395718407,

 -0.4605770994930703,

 -0.4635334633701297,

 -0.46248894542523283,

 -0.4574415453066346,

 -0.44838239989163853,

 -0.4352989531614325,

 -0.41818071792122086,

 -0.3970277136708146,

 -0.37186159052509726,

 -0.34273924922681115,

 -0.30976840918563076,

 -0.2731240538004664,

 -0.23306404306776102,

 -0.1899415581086558,

 -0.14421165209482797,

 -0.0964293002698065,

 -0.04723718928632544,

 0.002656915923132228,

 0.052511333287420414,

 0.10158632544851527,

 0.14917968745034146,

 0.1946571538104809,

 0.23747397657363717,

 0.2771860044330496,

 0.31345062421366837,

 0.3460194521989766,

 0.3747254270555303,

 0.399467007730528,

 0.420191751849972,

 0.4368809142682872])
'''
'''
np.array([0.46364760900080615,
 0.4616472791138404,
 0.4556424965970442,
 0.4456231321238629,
 0.4315765008224147,
 0.4134937567444741,
 0.3913789766671426,
 0.3652609082479852,
 0.335207122267919,
 0.30133991031666313,
 0.26385271169564106,
 0.2230252019884612,
 0.17923458339921525,
 0.1329603231802893,
 0.08477986379555537,
 0.03535386391853913,
 -0.014598723955535572,
 -0.06433334612510618,
 -0.11311611539570644,
 -0.16025857740224791,
 -0.2051462729814271,
 -0.24725787954004508,
 -0.286173766753117,
 -0.32157475367301286,
 -0.3532332091587291,
 -0.38099921763232597,
 -0.4047844444086243,
 -0.4245458337303965,
 -0.440270621840136,
 -0.4519635383244488,
 -0.4596366010729208,
 -0.4633016092763693,
 -0.4629652867220663,
 -0.4586269871753954,
 -0.45027890419651984,
 -0.43790879109437814,
 -0.42150525710131975,
 -0.4010657272323106,
 -0.3766070969065042,
 -0.3481789375544691,
 -0.3158787808798515,
 -0.2798685143607494,
 -0.24039029510499033,
 -0.1977797476547955,
 -0.1524737601473603,
 -0.10501020205799923,
 -0.05601759596270749,
 -0.006194252508291571,
 0.04372161129232162,
 0.09298724580303104,
 0.14089138135817264,
 0.1867858671377193,
 0.23010899492299575,
 0.27039846446686044,
 0.3072940163741268,
 0.3405314023766045,
 0.3699302660533718,
 0.39537867107273006,
 0.4168166507377127,
 0.4342205356400878,
 0.44758917257023245,
 0.4569326145020959,
 0.4622634914645416,
 0.4635910619554935,
 0.4609178625863942,
 0.4542388794958596,
 0.443543219224457,
 0.4288183226484384,
 0.4100568076911279,
 0.3872660074022217,
 0.3604801492772087,
 0.32977486041409204,
 0.29528325639376496,
 0.25721229172338783,
 0.2158573949995586,
 0.17161285111792834,
 0.12497517657963061,
 0.07653713022413407,
 0.026971168373588976,
 -0.022997007877923855,
 -0.07262207820346725,
 -0.12117547931370087,
 -0.16797942822365203,
 -0.212434073000226,
 -0.2540348778307371,
 -0.292379429908203,
 -0.32716473381699773,
 -0.35817728708573304,
 -0.38527868492971923,
 -0.4083893253940738,
 -0.42747224271083517,
 -0.44251844204743046,
 -0.4535345188677597,
 -0.4605329060782174,
 -0.46352481827718767,
 -0.4625158318645305,
 -0.457504014054683,
 -0.4484805524946041,
 -0.43543290251012606,
 -0.4183505254004926])

'''


ref_traj = np.array([x_vals, y_vals, thetaval])
 
#ref_traj = pd.read_csv("lake_track_waypoints.csv")
nt = len(ref_traj[0]) #no. of time step
control_horizon = 15
x_obs = 7
y_obs = 0.1
#define state variables (actual trajectory)

#define states variables' boundaries
 
#initialize the states [x, y, psi, v]
p_init = np.array([[0,-0.5,0.1,0]])
state_pred = [p_init]
#define control variables
num_control = 2
u_traj = np.zeros(control_horizon*num_control)
#define control variables' boundaries
u_bounds = []
for i in range(control_horizon):
        u_bounds += [[-1, 1]]
        u_bounds += [[-6, 6]] #45 degrees in radian

#initialize the control variables
u_init = np.array([[0,0]])
 
for i in range(1,nt):
    #shift the first two control parameters and add the newly added two parameters
    u_traj = np.delete(u_traj,0)
    u_traj = np.delete(u_traj,0)
    u_traj = np.append(u_traj, u_traj[-2])
    u_traj = np.append(u_traj, u_traj[-2])

    ###step1:minimize the cost function to optimize the control parametrs by doing nonlinear optimization###

    ref_point = [ref_traj[0][i-1],ref_traj[1][i-1],ref_traj[2][i-1]]
    #minimize the fcost unction using sequential least squares method 
    u_opti = minimize(cost_function, u_traj, (p_init[-1], ref_point),
                            method='SLSQP',
                            bounds=u_bounds,
                            tol = 1e-5)
    u_traj = u_opti.x
    #####step2: predict the next state variables using the first control pair  ###
    res = predict_model(p_init[-1], dt, u_traj[0], u_traj[1])

    p_pred = np.array([res])
    #####step3: predict the rest of the state variables using the rest of the control pairs ###
    for j in range(1, control_horizon):
        predicted =predict_model(p_pred[-1], dt, u_traj[2*j], u_traj[2*j+1])
        p_pred = np.append(p_pred, np.array([predicted]), axis=0)
    state_pred += [p_pred]
    p_init = np.append(p_init, np.array([res]), axis=0)
    u_init = np.append(u_init, np.array([(u_traj[0], u_traj[1])]), axis=0)

 
###################
# Animate the car movement
fig = plt.figure(figsize=(10, 10))

# Elevator plot settings.
ax = fig.add_subplot()

ax.set_xlim([np.min(ref_traj[0]), np.max(ref_traj[0])])
ax.set_ylim([-3, 17])
plt.xticks(np.linspace(ref_traj[0][0],ref_traj[0][-1], 10))
#plt.yticks(np.linspace(ref_traj[1][0],ref_traj[1][-1], 10))
plt.title('MPC car animation')

# Time display.
time_text = ax.text(6, 0.5, '', fontsize=15)

# Main plot info.
car_width = 1.0
patch_car = mpatches.Rectangle((0, 0), car_width, 2.5, fc='k', fill=False)

ax.add_patch(patch_car)
#ax.add_patch(patch_goal)
predict, = ax.plot([], [], 'r--', linewidth = 1)

# Car steering and throttle position.
telem = [3,14]

# Obstacles

#patch_obs = mpatches.Circle((x_obs, y_obs),0.5)
#ax.add_patch(patch_obs)

# Shift xy, centered on rear of car to rear left corner of car.
def car_patch_pos(x, y, psi):
    #return [x,y]
    x_new = x - np.sin(psi)*(car_width/2)
    y_new = y + np.cos(psi)*(car_width/2)
    return [x_new, y_new]
 
def update_plot(num):
    # Car setup
    patch_car.set_xy(car_patch_pos(p_init[num,0], p_init[num,1], p_init[num,2]))
    patch_car.angle = np.rad2deg(p_init[num,2])-90

    # Car wheels
    np.rad2deg(p_init[num,2])
    predict.set_data(state_pred[num][:,0],state_pred[num][:,1])
  

    return patch_car, time_text



car_ani = animation.FuncAnimation(fig, update_plot, frames=range(1,len(p_init)), interval=100, repeat=True, blit=False)
#car_ani.save('mpc-video.mp4')

plt.show()

#plot the reference and the actual trajectories 
plt.plot(ref_traj[0], ref_traj[1], label='reference trajectory')
plt.plot(p_init[:,0], p_init[:,1], label='predicted trajectory')
plt.xlabel('x position')
plt.ylabel('y position')
plt.legend()
plt.show()

#plot the error between the reference and the actual states
error_x = ref_traj[0] - p_init[:,0]
error_y = ref_traj[1] - p_init[:,1]
error_theta = ref_traj[2] - p_init[:,2]
avg_errorx = np.average(error_x)
avg_errory = np.average(error_y)
avg_errortheta = np.average(error_theta)
print('x avg error is'+str(avg_errorx))
print('y avg error is'+str(avg_errory))
print('theta avg error is'+str(avg_errortheta))
t = np.linspace(0,10,100)
plt.plot(t, error_x, label='e_x')
plt.plot(t, error_y, label='e_y')
plt.plot(t, error_theta, label='e_theta')
plt.xlabel('t')
plt.ylabel('error')
plt.legend()
plt.show()

















